{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOSX6bs2rGpKidEf/Lj3aDC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Imshubhham/Imshubham/blob/main/Music_Store_Data_Analysis.sql\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-VKYVazh91pG"
      },
      "outputs": [],
      "source": [
        "#Q1: Who is the senior most employee based on job title?\n",
        "\n",
        "SELECT title, last_name, first_name\n",
        "FROM employee\n",
        "ORDER BY levels DESC\n",
        "LIMIT 1\n",
        "\n",
        "\n",
        "#Q2: Which countries have the most Invoices?\n",
        "\n",
        "SELECT COUNT(*) AS c, billing_country\n",
        "FROM invoice\n",
        "GROUP BY billing_country\n",
        "ORDER BY c DESC\n",
        "\n",
        "\n",
        "#Q3: What are top 3 values of total invoice?\n",
        "\n",
        "SELECT total\n",
        "FROM invoice\n",
        "ORDER BY total DESC\n",
        "\n",
        "\n",
        "#Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money.\n",
        "#Write a query that returns one city that has the highest sum of invoice totals.\n",
        "#Return both the city name & sum of all invoice totals\n",
        "\n",
        "SELECT billing_city,SUM(total) AS InvoiceTotal\n",
        "FROM invoice\n",
        "GROUP BY billing_city\n",
        "ORDER BY InvoiceTotal DESC\n",
        "LIMIT 1;\n",
        "\n",
        "\n",
        "#Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer.\n",
        "#Write a query that returns the person who has spent the most money.\n",
        "\n",
        "SELECT customer.customer_id, first_name, last_name, SUM(total) AS total_spending\n",
        "FROM customer\n",
        "JOIN invoice ON customer.customer_id = invoice.customer_id\n",
        "GROUP BY customer.customer_id\n",
        "ORDER BY total_spending DESC\n",
        "LIMIT 1;\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners.\n",
        "#Return your list ordered alphabetically by email starting with A.\n",
        "\n",
        "SELECT DISTINCT email,first_name, last_name\n",
        "FROM customer\n",
        "JOIN invoice ON customer.customer_id = invoice.customer_id\n",
        "JOIN invoiceline ON invoice.invoice_id = invoiceline.invoice_id\n",
        "WHERE track_id IN(\n",
        "\tSELECT track_id FROM track\n",
        "\tJOIN genre ON track.genre_id = genre.genre_id\n",
        "\tWHERE genre.name LIKE 'Rock'\n",
        ")\n",
        "ORDER BY email;\n",
        "\n",
        "\n",
        "#Method 2\n",
        "\n",
        "SELECT DISTINCT email AS Email,first_name AS FirstName, last_name AS LastName, genre.name AS Name\n",
        "FROM customer\n",
        "JOIN invoice ON invoice.customer_id = customer.customer_id\n",
        "JOIN invoiceline ON invoiceline.invoice_id = invoice.invoice_id\n",
        "JOIN track ON track.track_id = invoiceline.track_id\n",
        "JOIN genre ON genre.genre_id = track.genre_id\n",
        "WHERE genre.name LIKE 'Rock'\n",
        "ORDER BY email;\n",
        "\n",
        "#Q2: Let's invite the artists who have written the most rock music in our dataset.\n",
        "#Write a query that returns the Artist name and total track count of the top 10 rock bands.\n",
        "\n",
        "SELECT artist.artist_id, artist.name,COUNT(artist.artist_id) AS number_of_songs\n",
        "FROM track\n",
        "JOIN album ON album.album_id = track.album_id\n",
        "JOIN artist ON artist.artist_id = album.artist_id\n",
        "JOIN genre ON genre.genre_id = track.genre_id\n",
        "WHERE genre.name LIKE 'Rock'\n",
        "GROUP BY artist.artist_id\n",
        "ORDER BY number_of_songs DESC\n",
        "LIMIT 10;\n",
        "\n",
        "#Q3: Return all the track names that have a song length longer than the average song length.\n",
        "#Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.\n",
        "\n",
        "SELECT name,miliseconds\n",
        "FROM track\n",
        "WHERE miliseconds > (\n",
        "\tSELECT AVG(miliseconds) AS avg_track_length\n",
        "\tFROM track )\n",
        "ORDER BY miliseconds DESC;\n",
        "\n",
        "\n",
        "\n",
        "#Q1: Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent\n",
        "\n",
        "Steps to Solve: First, find which artist has earned the most according to the InvoiceLines. Now use this artist to find\n",
        "which customer spent the most on this artist. For this query, you will need to use the Invoice, InvoiceLine, Track, Customer,\n",
        "Album, and Artist tables. Note, this one is tricky because the Total spent in the Invoice table might not be on a single product,\n",
        "so you need to use the InvoiceLine table to find out how many of each product was purchased, and then multiply this by the price\n",
        "for each artist. */\n",
        "\n",
        "WITH best_selling_artist AS (\n",
        "\tSELECT artist.artist_id AS artist_id, artist.name AS artist_name, SUM(invoice_line.unit_price*invoice_line.quantity) AS total_sales\n",
        "\tFROM invoice_line\n",
        "\tJOIN track ON track.track_id = invoice_line.track_id\n",
        "\tJOIN album ON album.album_id = track.album_id\n",
        "\tJOIN artist ON artist.artist_id = album.artist_id\n",
        "\tGROUP BY 1\n",
        "\tORDER BY 3 DESC\n",
        "\tLIMIT 1\n",
        ")\n",
        "SELECT c.customer_id, c.first_name, c.last_name, bsa.artist_name, SUM(il.unit_price*il.quantity) AS amount_spent\n",
        "FROM invoice i\n",
        "JOIN customer c ON c.customer_id = i.customer_id\n",
        "JOIN invoice_line il ON il.invoice_id = i.invoice_id\n",
        "JOIN track t ON t.track_id = il.track_id\n",
        "JOIN album alb ON alb.album_id = t.album_id\n",
        "JOIN best_selling_artist bsa ON bsa.artist_id = alb.artist_id\n",
        "GROUP BY 1,2,3,4\n",
        "ORDER BY 5 DESC;\n",
        "\n",
        "\n",
        "#Q2: We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre\n",
        "with the highest amount of purchases. Write a query that returns each country along with the top Genre. For countries where\n",
        "the maximum number of purchases is shared return all Genres.\n",
        "\n",
        "Steps to Solve:  There are two parts in question- first most popular music genre and second need data at country level.\n",
        "\n",
        "#ethod 1: Using CTE\n",
        "\n",
        "WITH popular_genre AS\n",
        "(\n",
        "    SELECT COUNT(invoice_line.quantity) AS purchases, customer.country, genre.name, genre.genre_id,\n",
        "\tROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) AS RowNo\n",
        "    FROM invoice_line\n",
        "\tJOIN invoice ON invoice.invoice_id = invoice_line.invoice_id\n",
        "\tJOIN customer ON customer.customer_id = invoice.customer_id\n",
        "\tJOIN track ON track.track_id = invoice_line.track_id\n",
        "\tJOIN genre ON genre.genre_id = track.genre_id\n",
        "\tGROUP BY 2,3,4\n",
        "\tORDER BY 2 ASC, 1 DESC\n",
        ")\n",
        "SELECT * FROM popular_genre WHERE RowNo <= 1\n",
        "\n",
        "\n",
        "#Method 2: : Using Recursive\n",
        "\n",
        "WITH RECURSIVE\n",
        "\tsales_per_country AS(\n",
        "\t\tSELECT COUNT(*) AS purchases_per_genre, customer.country, genre.name, genre.genre_id\n",
        "\t\tFROM invoice_line\n",
        "\t\tJOIN invoice ON invoice.invoice_id = invoice_line.invoice_id\n",
        "\t\tJOIN customer ON customer.customer_id = invoice.customer_id\n",
        "\t\tJOIN track ON track.track_id = invoice_line.track_id\n",
        "\t\tJOIN genre ON genre.genre_id = track.genre_id\n",
        "\t\tGROUP BY 2,3,4\n",
        "\t\tORDER BY 2\n",
        "\t),\n",
        "\tmax_genre_per_country AS (SELECT MAX(purchases_per_genre) AS max_genre_number, country\n",
        "\t\tFROM sales_per_country\n",
        "\t\tGROUP BY 2\n",
        "\t\tORDER BY 2)\n",
        "\n",
        "SELECT sales_per_country.*\n",
        "FROM sales_per_country\n",
        "JOIN max_genre_per_country ON sales_per_country.country = max_genre_per_country.country\n",
        "WHERE sales_per_country.purchases_per_genre = max_genre_per_country.max_genre_number;\n",
        "\n",
        "\n",
        "#Q3: Write a query that determines the customer that has spent the most on music for each country.\n",
        "Write a query that returns the country along with the top customer and how much they spent.\n",
        "For countries where the top amount spent is shared, provide all customers who spent this amount.\n",
        "\n",
        "Steps to Solve:  Similar to the above question. There are two parts in question-\n",
        "first find the most spent on music for each country and second filter the data for respective customers.\n",
        "\n",
        "#Method 1: using CTE\n",
        "\n",
        "WITH Customter_with_country AS (\n",
        "\t\tSELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending,\n",
        "\t    ROW_NUMBER() OVER(PARTITION BY billing_country ORDER BY SUM(total) DESC) AS RowNo\n",
        "\t\tFROM invoice\n",
        "\t\tJOIN customer ON customer.customer_id = invoice.customer_id\n",
        "\t\tGROUP BY 1,2,3,4\n",
        "\t\tORDER BY 4 ASC,5 DESC)\n",
        "SELECT * FROM Customter_with_country WHERE RowNo <= 1\n",
        "\n",
        "\n",
        "#Method 2: Using Recursive\n",
        "\n",
        "WITH RECURSIVE\n",
        "\tcustomter_with_country AS (\n",
        "\t\tSELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending\n",
        "\t\tFROM invoice\n",
        "\t\tJOIN customer ON customer.customer_id = invoice.customer_id\n",
        "\t\tGROUP BY 1,2,3,4\n",
        "\t\tORDER BY 2,3 DESC),\n",
        "\n",
        "\tcountry_max_spending AS(\n",
        "\t\tSELECT billing_country,MAX(total_spending) AS max_spending\n",
        "\t\tFROM customter_with_country\n",
        "\t\tGROUP BY billing_country)\n",
        "\n",
        "SELECT cc.billing_country, cc.total_spending, cc.first_name, cc.last_name, cc.customer_id\n",
        "FROM customter_with_country cc\n",
        "JOIN country_max_spending ms\n",
        "ON cc.billing_country = ms.billing_country\n",
        "WHERE cc.total_spending = ms.max_spending\n",
        "ORDER BY 1;\n",
        "\n"
      ]
    }
  ]
}